services:
  # NextJS application
  next_app:
    container_name: ${COMPOSE_PROJECT_NAME}_next_app
    build:
      context: ./next-app
      dockerfile: docker/prod.dockerfile
      args:
        # prefixed "NEXT_PUBLIC" give read access to nodejs and browser
        NEXT_PUBLIC_APP_HOST_DOMAIN: ${NEXT_APP_HOST_DOMAIN}
        NEXT_PUBLIC_APP_EXTERNAL_URL: ${NEXT_APP_EXTERNAL_URL}
        # other variables give access to nodejs only
        NEXT_APP_HOST_HTTP_PORT: ${NEXT_APP_HOST_HTTP_PORT}
        NEXT_APP_HOST_HTTPS_PORT: ${NEXT_APP_HOST_HTTPS_PORT}
    volumes:
      - next_app_data:/app
    restart: always
    ports:
      - 3000:3000
    depends_on:
      mariadb:
        condition: service_healthy
    networks:
      - next_app_network
  
  # Database
  mariadb:
    container_name: ${COMPOSE_PROJECT_NAME}_mariadb
    image: docker.io/bitnami/mariadb:${MARIADB_VERSION:-latest}
    hostname: mariadb
    restart: always
    volumes:
      - 'mariadb_data:/bitnami/mariadb'
    environment:
      - ALLOW_EMPTY_PASSWORD=no
    healthcheck:
      test: ['CMD', '/opt/bitnami/scripts/mariadb/healthcheck.sh']
      interval: 15s
      timeout: 5s
      retries: 6
    networks:
      - next_app_network

  # Nginx webserver
  webserver:
    depends_on:
      - next_app
    image: nginx:${NGINX_VERSION:-latest}
    container_name: ${COMPOSE_PROJECT_NAME}_webserver
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - next_app_data:/var/www/html
      - ./nginx-conf:/etc/nginx/conf.d
    networks:
      - next_app_network

# Volumes
volumes:
  mariadb_data:
  next_app_data:

# Networks
networks:
  next_app_network:
    driver: bridge
    name: "${COMPOSE_PROJECT_NAME}_network"